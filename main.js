!function(){"use strict";function t(t,n){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(t);n&&(e=e.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),r.push.apply(r,e)}return r}function n(n){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?t(Object(o),!0).forEach((function(t){r(n,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(o)):t(Object(o)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(o,t))}))}return n}function r(t,n,r){return n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t}function e(t,n){if(t){if("string"==typeof t)return o(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(t,n):void 0}}function o(t,n){(null==n||n>t.length)&&(n=t.length);for(var r=0,e=new Array(n);r<n;r++)e[r]=t[r];return e}function i(t,n,r){var e=[];if("x"===r)for(var o=t[0],i=t[1],a=0;a<n;a++)e.push([o,+i+a]);else if("y"===r)for(var u=t[0],c=t[1],f=0;f<n;f++)e.push([+u+f,c]);return e}var a=function(t,r,o){var a,u={positions:{},createPos:t,axis:o,len:r},c=i(t,r,o),f=function(t,n){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=e(t))){r&&(t=r);var o=0,i=function(){};return{s:i,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,u=!0,c=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return u=t.done,t},e:function(t){c=!0,a=t},f:function(){try{u||null==r.return||r.return()}finally{if(c)throw a}}}}(c);try{for(f.s();!(a=f.n()).done;){var l=a.value;u.positions[String(l)]="good"}}catch(t){f.e(t)}finally{f.f()}var s,d,p=(s=c.slice(-1),d=1,function(t){if(Array.isArray(t))return t}(s)||function(t,n){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var e,o,i=[],a=!0,u=!1;try{for(r=r.call(t);!(a=(e=r.next()).done)&&(i.push(e.value),!n||i.length!==n);a=!0);}catch(t){u=!0,o=t}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}}(s,d)||e(s,d)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());return u.lastPosition=p[0],n(n(n(n(n(n(n({},function(t){return{getPositions:function(){return t.positions}}}(u)),function(t){return{isSunk:function(){return Object.values(t.positions).every((function(t){return"hit"===t}))}}}(u)),function(t){return{hit:function(n){t.positions[String(n)]="hit"}}}(u)),function(t){return{getLen:function(){return t.len}}}(u)),function(t){return{getCreatePos:function(){return t.createPos}}}(u)),function(t){return{getLastPos:function(){return t.lastPosition}}}(u)),function(t){return{getAxis:function(){return t.axis}}}(u))};function u(t,n){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(t);n&&(e=e.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),r.push.apply(r,e)}return r}function c(t){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?u(Object(r),!0).forEach((function(n){f(t,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(r,n))}))}return t}function f(t,n,r){return n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t}function l(t,n){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=function(t,n){if(t){if("string"==typeof t)return s(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?s(t,n):void 0}}(t))||n&&t&&"number"==typeof t.length){r&&(t=r);var e=0,o=function(){};return{s:o,n:function(){return e>=t.length?{done:!0}:{done:!1,value:t[e++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,u=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,i=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw i}}}}function s(t,n){(null==n||n>t.length)&&(n=t.length);for(var r=0,e=new Array(n);r<n;r++)e[r]=t[r];return e}function d(t,n,r){n.forEach((function(n){t.positions[String(n)]=r}))}function p(t){return Object.keys(t.getPositions())}function y(t,n){var r=p(n),e=[];return r.forEach((function(n){for(var r=n.split(","),o=-1;o<2;o+=1)for(var i=-1;i<2;i+=1){var a=String([+r[0]+o,+r[1]+i]);"empty"!==t.positions[a]&&"unavailable"!==t.positions[a]||e.includes(a)||e.push(a)}})),e}function v(t,n,r,e){var o=a(n,r,e);return function(t,n){d(t,p(n),"ship")}(t,o),function(t,n){d(t,y(t,n),"unavailable")}(t,o),function(t,n){t.ships.push(n)}(t,o),o}function h(t,n){!function(t,n){d(t,p(n),"empty")}(t,n),function(t,n){d(t,y(t,n),"empty")}(t,n),function(t,n){var r=t.ships.indexOf(n);t.ships.splice(r,1)}(t,n)}function m(t,n){return"ship"===t.positions[String(n)]}var b=function(t){for(var n={positions:{},ships:[],gameBoardLen:t},r=0;r<t;r++)for(var e=0;e<t;e++)n.positions[String([r,e])]="empty";return c(c(c(c(c(c(c(c(c(c({},function(t){return{getPositions:function(){return t.positions}}}(n)),function(t){return{getShips:function(){return t.ships}}}(n)),function(t){return{createShip:function(n,r,e){return v(t,n,r,e)}}}(n)),function(t){return{removeShip:function(n){h(t,n)}}}(n)),function(t){return{changeShipAxis:function(n,r){return function(t,n){return h(t,n),v(t,n.getCreatePos(),n.getLen(),"x"===n.getAxis()?"y":"x")}(t,n)}}}(n)),function(t){return{checkPlacement:function(n,r,e){return function(t,n,r,e){var o,a=l(i(n,r,e));try{for(a.s();!(o=a.n()).done;){var u=o.value;if("empty"!==t.positions[String(u)])return!1}}catch(t){a.e(t)}finally{a.f()}return!0}(t,n,r,e)}}}(n)),function(t){return{receiveAttack:function(n){return function(t,n){if(m(t,n)){var r=function(t,n){var r,e=l(t);try{for(e.s();!(r=e.n()).done;){var o=r.value;if(Object.keys(o.getPositions()).includes(String(n)))return o}}catch(t){e.e(t)}finally{e.f()}}(t.ships,n);return r.hit(n),r}}(t,n)}}}(n)),function(t){return{isGameOver:function(){return function(t){var n=!0;return t.ships.forEach((function(t){t.isSunk()||(n=!1)})),n}(t)}}}(n)),function(t){return{checkAttack:function(n){return m(t,n)}}}(n)),function(t){return{getPositionsAroundShip:function(n){return y(t,n)}}}(n))};function g(t,n){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(t);n&&(e=e.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),r.push.apply(r,e)}return r}function S(t){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?g(Object(r),!0).forEach((function(n){O(t,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):g(Object(r)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(r,n))}))}return t}function O(t,n,r){return n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t}function A(t,n){(null==n||n>t.length)&&(n=t.length);for(var r=0,e=new Array(n);r<n;r++)e[r]=t[r];return e}var j=10;function w(t){for(var n=0;n<j;n++)for(var r=0;r<j;r++)t.availableShots.push(String([n,r]))}var P=function(t){return{getGameBoard:function(){return t.gameBoard}}},E=function(t){return{getGameBoardLen:function(){return t.gameBoardLen}}},L=function(t){return{createShip:function(n,r,e){return function(t,n,r,e){return t.gameBoard.createShip(n,r,e)}(t,n,r,e)}}};function x(t,n,r,e){return t.gameBoard.checkPlacement(n,r,e)}var k=function(t){return{checkPlacement:function(n,r,e){return x(t,n,r,e)}}},I=function(t){return{removeShip:function(n){!function(t,n){t.gameBoard.removeShip(n)}(t,n)}}},C=function(t){return{changeShipAxis:function(n){return function(t,n){return t.gameBoard.changeShipAxis(n)}(t,n)}}};function B(t){return t[Math.floor(t.length*Math.random())]}var M=function(t){return{getRandomShip:function(n){return function(t,n){for(var r=[],e=0;e<j;e++)for(var o=0;o<j;o++)r.push([e,o]);for(;;){var i=B(r),u=Math.floor(100*Math.random())%2==0?"x":"y";if(x(t,i,n,u))return a(i,n,u);var c="x"===u?"y":"x";if(x(t,i,n,c))return a(i,n,c);r.splice(r.indexOf(i),1)}}(t,n)}}},T=function(t){return{clear:function(){!function(t){for(var n=function(t){if(Array.isArray(t))return A(t)}(e=t.gameBoard.getShips())||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(e)||function(t,n){if(t){if("string"==typeof t)return A(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?A(t,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),r=0;r<n.length;r++)t.gameBoard.removeShip(n[r]);var e}(t)}}},D=function(t){return{getAvailableShots:function(){return t.availableShots}}},G=function(t){return{attack:function(n,r){return function(t,n,r){var e=t.availableShots.indexOf(String(r));t.availableShots.splice(e,1);var o=n.receiveAttack(r);return o&&o.isSunk()&&n.getPositionsAroundShip(o).forEach((function(n){var r=t.availableShots.indexOf(String(n));-1!==r&&t.availableShots.splice(r,1)})),o}(t,n,r)}}};function U(){var t={gameBoard:b(j),gameBoardLen:j,availableShots:[]};return w(t),S(S(S(S(S(S(S(S(S(S(S({},P(t)),E(t)),L(t)),k(t)),I(t)),C(t)),M(t)),T(t)),D(t)),G(t)),function(t){return{getAttackPosition:function(){return function(t){return r=(n=t.availableShots).length,n[Math.floor(Math.random()*r)];var n,r}(t)}}}(t))}function $(t,n){(null==n||n>t.length)&&(n=t.length);for(var r=0,e=new Array(n);r<n;r++)e[r]=t[r];return e}function q(){for(var t=document.createElement("div"),n=0;n<j;n++)for(var r=0;r<j;r++){var e=document.createElement("div");e.classList.add("position","p-".concat(n,"-").concat(r)),t.appendChild(e)}return t.classList.add("game-board"),t}function H(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var e,o,i=[],a=!0,u=!1;try{for(r=r.call(t);!(a=(e=r.next()).done)&&(i.push(e.value),!n||i.length!==n);a=!0);}catch(t){u=!0,o=t}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}}(t,n)||R(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function R(t,n){if(t){if("string"==typeof t)return z(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?z(t,n):void 0}}function z(t,n){(null==n||n>t.length)&&(n=t.length);for(var r=0,e=new Array(n);r<n;r++)e[r]=t[r];return e}var F=function(t,n,r){var e,o,i=function(t,n){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=R(t))){r&&(t=r);var e=0,o=function(){};return{s:o,n:function(){return e>=t.length?{done:!0}:{done:!1,value:t[e++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,u=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,i=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw i}}}}(n);try{for(i.s();!(e=i.n()).done;){var a=e.value,u=H(String(a).split(","),2),c=u[0],f=u[1];(o=t.children,function(t){if(Array.isArray(t))return z(t)}(o)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(o)||R(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[+c*j+ +f].classList.add(r)}}catch(t){i.e(t)}finally{i.f()}};function J(t){return function(t){if(Array.isArray(t))return N(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||K(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function K(t,n){if(t){if("string"==typeof t)return N(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?N(t,n):void 0}}function N(t,n){(null==n||n>t.length)&&(n=t.length);for(var r=0,e=new Array(n);r<n;r++)e[r]=t[r];return e}function Q(t){var n=document.createElement("div"),r=document.createElement("div");r.textContent=t;var e=document.createElement("button");return e.textContent="play again",n.appendChild(r),n.appendChild(e),n}function V(t,n,r,e,o){var i,a,u,c,f=t.getAttackPosition(),l=t.attack(n,f),s=J(r.children)[(i=f,a=function(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var e,o,i=[],a=!0,u=!1;try{for(r=r.call(t);!(a=(e=r.next()).done)&&(i.push(e.value),!n||i.length!==n);a=!0);}catch(t){u=!0,o=t}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}}(t,n)||K(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(String(i).split(","),2),u=a[0],c=a[1],+u*j+ +c)];if(l){if(s.classList.add("hit"),l.isSunk()){var d=n.getPositionsAroundShip(l);F(r,d,"invalid")}}else s.classList.add("miss");if(n.isGameOver()){var p=Q("you lost!");e.classList.add("finished"),o.appendChild(p),p.querySelector("button").addEventListener("click",(function(){o.innerHTML="",Y(o)}))}}var W=[4,3,3,2,2,2,1,1,1,1];function X(t,n,r){r.forEach((function(r){var e=t.getRandomShip(r);!function(t,n,r,e,o){var a=t.createShip(r,e,o);(function(t,n){t.forEach((function(t){var r=".p-".concat(String(t).replace(",","-"));n.querySelector(r).classList.add("ship")}))})(i(r,e,o),n)}(t,n,e.getCreatePos(),r,e.getAxis())}))}var Y=function(t){var n,r=q(),e=(w(n={gameBoard:b(j),gameBoardLen:j,availableShots:[]}),S(S(S(S(S(S(S(S(S(S({},P(n)),E(n)),L(n)),k(n)),I(n)),C(n)),M(n)),T(n)),D(n)),G(n))),o=document.createElement("div");o.classList.add("board-container"),o.appendChild(r);var i=document.createElement("button");i.textContent="random",i.classList.add("random");var a=document.createElement("button");a.textContent="start",a.classList.add("start"),t.appendChild(o),t.appendChild(i),t.appendChild(a),X(e,r,W),i.addEventListener("click",(function(){var t;e.clear(),(t=r.children,function(t){if(Array.isArray(t))return $(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,n){if(t){if("string"==typeof t)return $(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?$(t,n):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).forEach((function(t){t.classList.remove("ship")})),X(e,r,W)})),a.addEventListener("click",(function(){var n=U(),o=q();X(n,o,W),t.innerHTML="",function(t,n,r,e,o){var i=document.createElement("div");i.classList.add("boards-container"),i.appendChild(e),i.appendChild(o);for(var a=J(o.children),u=function(i){for(var u=function(u){a[i*j+u].addEventListener("click",(function(a){var c=a.target;!function(t,n,r,e,o,i,a,u,c){var f=n.attack(o,t);if(f){if(u.classList.add("hit"),f.isSunk()){var l=o.getPositionsAroundShip(f);F(i,l,"invalid")}}else u.classList.add("miss");if(o.isGameOver()){var s=Q("you won!");i.classList.add("finished"),c.appendChild(s),s.querySelector("button").addEventListener("click",(function(){c.innerHTML="",Y(c)}))}else V(r,e,a,i,c)}([i,u],n,r,n.getGameBoard(),r.getGameBoard(),o,e,c,t)}))},c=0;c<j;c++)u(c)},c=0;c<j;c++)u(c);t.appendChild(i)}(t,e,n,r,o)}))},Z=document.querySelector("main");Y(Z)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,