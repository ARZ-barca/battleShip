!function(){"use strict";function t(t,r){(null==r||r>t.length)&&(r=t.length);for(var e=0,n=new Array(r);e<r;e++)n[e]=t[e];return n}function r(t,r,e){Object.keys(t.positions).forEach((function(t){var n=t.split(","),o='*[data-row="'.concat(n[0],'"][data-column="').concat(n[1],'"]');r.querySelector(o).classList.add(e)}))}function e(t,r,e){Object.keys(t.positions).forEach((function(t){var n=t.split(","),o='*[data-row="'.concat(n[0],'"][data-column="').concat(n[1],'"]');r.querySelector(o).classList.remove(e)}))}function n(t,r){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable}))),e.push.apply(e,n)}return e}function o(t){for(var r=1;r<arguments.length;r++){var e=null!=arguments[r]?arguments[r]:{};r%2?n(Object(e),!0).forEach((function(r){i(t,r,e[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):n(Object(e)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(e,r))}))}return t}function i(t,r,e){return r in t?Object.defineProperty(t,r,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[r]=e,t}function a(t,r){(null==r||r>t.length)&&(r=t.length);for(var e=0,n=new Array(r);e<r;e++)n[e]=t[e];return n}function c(t,r,e){var n=String(t).split(","),o=[];if("x"===e)for(var i=n[0],a=n[1],c=0;c<r;c++)o.push([+i,+a+c]);else if("y"===e)for(var u=n[0],s=n[1],f=0;f<r;f++)o.push([+u+f,+s]);return o}var u=function(t,r,e){var n,i={positions:{},createPos:t,axis:e,len:r},u=function(t,r){var e="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!e){if(Array.isArray(t)||(e=function(t,r){if(t){if("string"==typeof t)return a(t,r);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?a(t,r):void 0}}(t))||r&&t&&"number"==typeof t.length){e&&(t=e);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,c=!0,u=!1;return{s:function(){e=e.call(t)},n:function(){var t=e.next();return c=t.done,t},e:function(t){u=!0,i=t},f:function(){try{c||null==e.return||e.return()}finally{if(u)throw i}}}}(c(t,r,e));try{for(u.s();!(n=u.n()).done;){var s=n.value;i.positions[String(s)]="good"}}catch(t){u.e(t)}finally{u.f()}return o(o({get positions(){return i.positions},get len(){return i.len},get axis(){return i.axis},get createPos(){return i.createPos}},function(t){return{isSunk:function(){return Object.values(t.positions).every((function(t){return"hit"===t}))}}}(i)),function(t){return{getHit:function(r){t.positions[String(r)]="hit"}}}(i))};function s(t,r){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable}))),e.push.apply(e,n)}return e}function f(t){for(var r=1;r<arguments.length;r++){var e=null!=arguments[r]?arguments[r]:{};r%2?s(Object(e),!0).forEach((function(r){l(t,r,e[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):s(Object(e)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(e,r))}))}return t}function l(t,r,e){return r in t?Object.defineProperty(t,r,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[r]=e,t}function p(t,r){var e="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!e){if(Array.isArray(t)||(e=function(t,r){if(t){if("string"==typeof t)return d(t,r);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?d(t,r):void 0}}(t))||r&&t&&"number"==typeof t.length){e&&(t=e);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){e=e.call(t)},n:function(){var t=e.next();return a=t.done,t},e:function(t){c=!0,i=t},f:function(){try{a||null==e.return||e.return()}finally{if(c)throw i}}}}function d(t,r){(null==r||r>t.length)&&(r=t.length);for(var e=0,n=new Array(r);e<r;e++)n[e]=t[e];return n}function y(t,r,e){r.forEach((function(r){t.positions[String(r)]=e}))}function v(t,r){var e=Object.keys(r.positions),n=[];return e.forEach((function(r){for(var e=r.split(","),o=-1;o<2;o+=1)for(var i=-1;i<2;i+=1){var a=String([+e[0]+o,+e[1]+i]);"empty"!==t.positions[a]&&"unavailable"!==t.positions[a]||n.includes(a)||n.push(a)}})),n}function h(t,r,e,n){var o=u(r,e,n);return y(t,Object.keys(o.positions),"ship"),y(t,v(t,o),"unavailable"),t.ships.push(o),o}function b(t,r){var e=t.ships.indexOf(r);t.ships.splice(e,1);var n=v(t,r).filter((function(r){var e=!0;return t.ships.forEach((function(n){v(t,n).includes(String(r))&&(e=!1)})),e}));y(t,n,"empty");var o=Object.keys(r.positions);y(t,o,"empty")}function m(t,r,e,n){var o,i=p(c(r,e,n));try{for(i.s();!(o=i.n()).done;){var a=o.value;if("empty"!==t.positions[String(a)])return!1}}catch(t){i.e(t)}finally{i.f()}return!0}function g(t,r){var e,n=p(t.ships);try{for(n.s();!(e=n.n()).done;){var o=e.value;if(Object.keys(o.positions).includes(String(r)))return o}}catch(t){n.e(t)}finally{n.f()}}function O(t,r){for(var e=Object.keys(t.positions);;){var n=e[Math.floor(e.length*Math.random())],o=Math.floor(100*Math.random())%2==0?"x":"y";if(m(t,n,r,o))return u(n,r,o);var i="x"===o?"y":"x";if(m(t,n,r,i))return u(n,r,i);if(e.splice(e.indexOf(n),1),0===e.length)throw new Error("board is not big enough for this many ships")}}var S=function(t){for(var r={positions:{},ships:[],gameBoardLen:t},e=0;e<t;e++)for(var n=0;n<t;n++)r.positions[String([e,n])]="empty";return f(f(f(f(f(f(f(f(f(f({get positions(){return r.positions},get ships(){return r.ships}},function(t){return{createShip:function(r,e,n){return h(t,r,e,n)}}}(r)),function(t){return{removeShip:function(r){b(t,r)}}}(r)),function(t){return{checkPlacement:function(r,e,n){return m(t,r,e,n)}}}(r)),function(t){return{getHitShip:function(r){return g(t,r)}}}(r)),function(t){return{getHit:function(r){return function(t,r){var e=g(t,r);e&&e.getHit(r)}(t,r)}}}(r)),function(t){return{isGameOver:function(){return function(t){var r=!0;return t.ships.forEach((function(t){t.isSunk()||(r=!1)})),r}(t)}}}(r)),function(t){return{clear:function(){!function(t){for(var r=t.ships.length,e=0;e<r;e++)b(t,t.ships[0])}(t)}}}(r)),function(t){return{getRandomShip:function(r){return O(t,r)}}}(r)),function(t){return{randomize:function(r){!function(t,r){var e,n=p(r);try{for(n.s();!(e=n.n()).done;){var o=O(t,e.value);h(t,o.createPos,o.len,o.axis)}}catch(t){n.e(t)}finally{n.f()}}(t,r)}}}(r)),function(t){return{getPositionsAroundShip:function(r){return v(t,r)}}}(r))};function j(t,r){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable}))),e.push.apply(e,n)}return e}function w(t,r,e){return r in t?Object.defineProperty(t,r,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[r]=e,t}var P,A=function(){for(var t={gameBoard:S(10),gameBoardLen:10,availableShots:[]},r=0;r<10;r++)for(var e=0;e<10;e++)t.availableShots.push(String([r,e]));return function(t){for(var r=1;r<arguments.length;r++){var e=null!=arguments[r]?arguments[r]:{};r%2?j(Object(e),!0).forEach((function(r){w(t,r,e[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):j(Object(e)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(e,r))}))}return t}({get state(){return t},get gameBoard(){return t.gameBoard},get gameBoardLen(){return t.gameBoardLen},get availableShots(){return t.availableShots}},function(t){return{attack:function(r,e){return function(t,r,e){var n=t.availableShots.indexOf(String(e));-1!==n&&t.availableShots.splice(n,1),r.gameBoard.getHit(e);var o=r.gameBoard.getHitShip(e);o&&o.isSunk()&&r.gameBoard.getPositionsAroundShip(o).forEach((function(r){var e=t.availableShots.indexOf(String(r));-1!==e&&t.availableShots.splice(e,1)}))}(t,r,e)}}}(t))},E="ship",x="selected";function k(){P=void 0}function B(t,r){(null==r||r>t.length)&&(r=t.length);for(var e=0,n=new Array(r);e<r;e++)n[e]=t[e];return n}var D=[4,3,3,2,2,2,1,1,1,1];!function(n){var o=function(t){for(var r=document.createElement("div"),e=0;e<10;e++)for(var n=0;n<10;n++){var o=document.createElement("div");o.setAttribute("data-row",e),o.setAttribute("data-column",n),r.appendChild(o)}return r.classList.add("board"),r}(),i=A(),a=document.createElement("div");a.classList.add("board-container"),a.appendChild(o);var c,u=document.createElement("button");u.textContent="random",u.classList.add("random"),n.appendChild(a),n.appendChild(u),i.gameBoard.randomize(D),i.gameBoard.ships.forEach((function(t){r(t,o,"ship")})),u.addEventListener("click",(function(){var e;(e=o.children,function(r){if(Array.isArray(r))return t(r)}(e)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(e)||function(r,e){if(r){if("string"==typeof r)return t(r,e);var n=Object.prototype.toString.call(r).slice(8,-1);return"Object"===n&&r.constructor&&(n=r.constructor.name),"Map"===n||"Set"===n?Array.from(r):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?t(r,e):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).forEach((function(t){t.className=""})),i.gameBoard.clear(),i.gameBoard.randomize(D),i.gameBoard.ships.forEach((function(t){r(t,o,"ship")})),k()})),(c=o.children,function(t){if(Array.isArray(t))return B(t)}(c)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(c)||function(t,r){if(t){if("string"==typeof t)return B(t,r);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?B(t,r):void 0}}(c)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).forEach((function(t){t.addEventListener("click",(function(t){return function(t,n,o){var i=[t.getAttribute("data-row"),t.getAttribute("data-column")];if(!P){if(!t.className.includes(E))return;return P=n.getHitShip(i),n.removeShip(P),void r(P,o,x)}if(t.className.includes(E)){if(Object.keys(P.positions).includes(String(i))){var a="x"===P.axis?"y":"x";return void(n.checkPlacement(P.createPos,P.len,a)&&(e(P,o,x),e(P,o,E),r(n.createShip(P.createPos,P.len,a),o,E),k()))}return e(P,o,x),n.createShip(P.createPos,P.len,P.axis),P=n.getHitShip(i),n.removeShip(P),void r(P,o,x)}n.checkPlacement(i,P.len,P.axis)&&(e(P,o,x),e(P,o,E),r(n.createShip(i,P.len,P.axis),o,E),k())}(t.target,i.gameBoard,o)}))}))}(document.querySelector("main"))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,