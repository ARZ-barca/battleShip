!function(){"use strict";function t(t,r){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(t);r&&(e=e.filter((function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable}))),n.push.apply(n,e)}return n}function r(r){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?t(Object(o),!0).forEach((function(t){n(r,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):t(Object(o)).forEach((function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t))}))}return r}function n(t,r,n){return r in t?Object.defineProperty(t,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[r]=n,t}function e(t,r){if(t){if("string"==typeof t)return o(t,r);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(t,r):void 0}}function o(t,r){(null==r||r>t.length)&&(r=t.length);for(var n=0,e=new Array(r);n<r;n++)e[n]=t[n];return e}function i(t,r,n){var e=[];if("x"===n)for(var o=t[0],i=t[1],a=0;a<r;a++)e.push([o,+i+a]);else if("y"===n)for(var u=t[0],c=t[1],f=0;f<r;f++)e.push([+u+f,c]);return e}var a=function(t,n,o){var a,u={positions:{},createPos:t,axis:o,len:n},c=i(t,n,o),f=function(t,r){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=e(t))){n&&(t=n);var o=0,i=function(){};return{s:i,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,u=!0,c=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return u=t.done,t},e:function(t){c=!0,a=t},f:function(){try{u||null==n.return||n.return()}finally{if(c)throw a}}}}(c);try{for(f.s();!(a=f.n()).done;){var l=a.value;u.positions[String(l)]="good"}}catch(t){f.e(t)}finally{f.f()}var s,p,y=(s=c.slice(-1),p=1,function(t){if(Array.isArray(t))return t}(s)||function(t,r){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var e,o,i=[],a=!0,u=!1;try{for(n=n.call(t);!(a=(e=n.next()).done)&&(i.push(e.value),!r||i.length!==r);a=!0);}catch(t){u=!0,o=t}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(s,p)||e(s,p)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());return u.lastPosition=y[0],r(r(r(r(r({},function(t){return{getPositions:function(){return t.positions}}}(u)),function(t){return{getLen:function(){return t.len}}}(u)),function(t){return{getCreatePos:function(){return t.createPos}}}(u)),function(t){return{getLastPos:function(){return t.lastPosition}}}(u)),function(t){return{getAxis:function(){return t.axis}}}(u))};function u(t,r){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(t);r&&(e=e.filter((function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable}))),n.push.apply(n,e)}return n}function c(t){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?u(Object(n),!0).forEach((function(r){f(t,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(n,r))}))}return t}function f(t,r,n){return r in t?Object.defineProperty(t,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[r]=n,t}function l(t,r){(null==r||r>t.length)&&(r=t.length);for(var n=0,e=new Array(r);n<r;n++)e[n]=t[n];return e}function s(t,r,n){r.forEach((function(r){t.positions[String(r)]=n}))}function p(t){return Object.keys(t.getPositions())}function y(t,r){var n=p(r),e=[];return n.forEach((function(r){for(var n=r.split(","),o=-1;o<2;o+=1)for(var i=-1;i<2;i+=1){var a=String([+n[0]+o,+n[1]+i]);"empty"!==t.positions[a]&&"unavailable"!==t.positions[a]||e.includes(a)||e.push(a)}})),e}function d(t,r,n,e){var o=a(r,n,e);return function(t,r){s(t,p(r),"ship")}(t,o),function(t,r){s(t,y(t,r),"unavailable")}(t,o),function(t,r){t.ships.push(r)}(t,o),o}function b(t,r){!function(t,r){s(t,p(r),"empty")}(t,r),function(t,r){s(t,y(t,r),"empty")}(t,r),function(t,r){var n=t.ships.indexOf(r);t.ships.splice(n,1)}(t,r)}var m=function(t){return{checkPlacement:function(r,n,e){return function(t,r,n,e){var o,a=function(t,r){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,r){if(t){if("string"==typeof t)return l(t,r);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?l(t,r):void 0}}(t))||r&&t&&"number"==typeof t.length){n&&(t=n);var e=0,o=function(){};return{s:o,n:function(){return e>=t.length?{done:!0}:{done:!1,value:t[e++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,u=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return a=t.done,t},e:function(t){u=!0,i=t},f:function(){try{a||null==n.return||n.return()}finally{if(u)throw i}}}}(i(r,n,e));try{for(a.s();!(o=a.n()).done;){var u=o.value;if("empty"!==t.positions[String(u)])return!1}}catch(t){a.e(t)}finally{a.f()}return!0}(t,r,n,e)}}},v=function(t){for(var r={positions:{},ships:[],gameBoardLen:t},n=0;n<t;n++)for(var e=0;e<t;e++)r.positions[String([n,e])]="empty";return c(c(c(c(c(c(c({},function(t){return{getPositions:function(){return t.positions}}}(r)),function(t){return{getShips:function(){return t.ships}}}(r)),function(t){return{createShip:function(r,n,e){return d(t,r,n,e)}}}(r)),function(t){return{removeShip:function(r){b(t,r)}}}(r)),function(t){return{changeShipAxis:function(r,n){return function(t,r){return b(t,r),d(t,r.getCreatePos(),r.getLen(),"x"===r.getAxis()?"y":"x")}(t,r)}}}(r)),m(r)),function(t){return{getPositionsAroundShip:function(r){return y(t,r)}}}(r))};function h(t,r){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(t);r&&(e=e.filter((function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable}))),n.push.apply(n,e)}return n}function g(t){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?h(Object(n),!0).forEach((function(r){O(t,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):h(Object(n)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(n,r))}))}return t}function O(t,r,n){return r in t?Object.defineProperty(t,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[r]=n,t}function S(t,r){(null==r||r>t.length)&&(r=t.length);for(var n=0,e=new Array(r);n<r;n++)e[n]=t[n];return e}var j=10;function P(t,r,n,e){return t.gameBoard.checkPlacement(r,n,e)}function w(t){return t[Math.floor(t.length*Math.random())]}var A=function(t){return{clear:function(){!function(t){for(var r=function(t){if(Array.isArray(t))return S(t)}(e=t.gameBoard.getShips())||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(e)||function(t,r){if(t){if("string"==typeof t)return S(t,r);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?S(t,r):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),n=0;n<r.length;n++)t.gameBoard.removeShip(r[n]);var e}(t)}}},E=function(){var t={gameBoard:v(j),gameBoardLen:j};return g(g(g(g(g(g(g(g({},function(t){return{getGameBoard:function(){return t.gameBoard}}}(t)),function(t){return{getGameBoardLen:function(){return t.gameBoardLen}}}(t)),function(t){return{createShip:function(r,n,e){return function(t,r,n,e){return t.gameBoard.createShip(r,n,e)}(t,r,n,e)}}}(t)),function(t){return{checkPlacement:function(r,n,e){return P(t,r,n,e)}}}(t)),function(t){return{removeShip:function(r){!function(t,r){t.gameBoard.removeShip(r)}(t,r)}}}(t)),function(t){return{changeShipAxis:function(r){return function(t,r){return t.gameBoard.changeShipAxis(r)}(t,r)}}}(t)),function(t){return{getRandomShip:function(r){return function(t,r){for(var n=[],e=0;e<j;e++)for(var o=0;o<j;o++)n.push([e,o]);for(;;){var i=w(n),u=Math.floor(100*Math.random())%2==0?"x":"y";if(P(t,i,r,u))return a(i,r,u);var c="x"===u?"y":"x";if(P(t,i,r,c))return a(i,r,c);n.splice(n.indexOf(i),1)}}(t,r)}}}(t)),A(t))};function x(t,r){(null==r||r>t.length)&&(r=t.length);for(var n=0,e=new Array(r);n<r;n++)e[n]=t[n];return e}var I=[4,3,3,2,2,2,1,1,1,1];!function(t){var r=function(){for(var t=document.createElement("div"),r=0;r<j;r++)for(var n=0;n<j;n++){var e=document.createElement("div");e.classList.add("position","p-".concat(r,"-").concat(n)),t.appendChild(e)}return t.classList.add("game-board"),t}(),n=E(),e=document.createElement("div");e.classList.add("board-container"),e.appendChild(r);var o=document.createElement("button");o.textContent="random",o.classList.add("random"),t.appendChild(e),t.appendChild(o),o.addEventListener("click",(function(){n.clear(),function(t){var r;(r=t.children,function(t){if(Array.isArray(t))return x(t)}(r)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(r)||function(t,r){if(t){if("string"==typeof t)return x(t,r);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?x(t,r):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).forEach((function(t){t.classList.remove("ship")}))}(r),function(t,r,n){n.forEach((function(n){var e=t.getRandomShip(n);!function(t,r,n,e,o){var a=t.createShip(n,e,o);(function(t,r){t.forEach((function(t){var n=".p-".concat(String(t).replace(",","-"));r.querySelector(n).classList.add("ship")}))})(i(n,e,o),r)}(t,r,e.getCreatePos(),n,e.getAxis())}))}(n,r,I)}))}(document.querySelector("main"))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,