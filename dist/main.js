!function(){"use strict";function t(t,n){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(t);n&&(e=e.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),r.push.apply(r,e)}return r}function n(n){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?t(Object(o),!0).forEach((function(t){r(n,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(o)):t(Object(o)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(o,t))}))}return n}function r(t,n,r){return n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t}function e(t,n){(null==n||n>t.length)&&(n=t.length);for(var r=0,e=new Array(n);r<n;r++)e[r]=t[r];return e}function o(t,n,r){var e=[];if("x"===r)for(var o=t[0],i=t[1],u=0;u<n;u++)e.push([o,+i+u]);else if("y"===r)for(var c=t[0],a=t[1],f=0;f<n;f++)e.push([+c+f,a]);return e}var i=function(t,r,i){var u,c={positions:{},createPos:t,len:r},a=function(t,n){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(t))||n&&t&&"number"==typeof t.length){r&&(t=r);var o=0,i=function(){};return{s:i,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var u,c=!0,a=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return c=t.done,t},e:function(t){a=!0,u=t},f:function(){try{c||null==r.return||r.return()}finally{if(a)throw u}}}}(o(t,r,i));try{for(a.s();!(u=a.n()).done;){var f=u.value;c.positions[String(f)]="good"}}catch(t){a.e(t)}finally{a.f()}return n(n(n(n(n({},function(t){return{getPositions:function(){return t.positions}}}(c)),function(t){return{isSunk:function(){return Object.values(t.positions).every((function(t){return"hit"===t}))}}}(c)),function(t){return{hit:function(n){t.positions[String(n)]="hit"}}}(c)),function(t){return{getLen:function(){return t.len}}}(c)),function(t){return{getCreatePos:function(){return t.createPos}}}(c))};function u(t,n){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(t);n&&(e=e.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),r.push.apply(r,e)}return r}function c(t){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?u(Object(r),!0).forEach((function(n){a(t,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(r,n))}))}return t}function a(t,n,r){return n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t}function f(t,n){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=function(t,n){if(t){if("string"==typeof t)return s(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?s(t,n):void 0}}(t))||n&&t&&"number"==typeof t.length){r&&(t=r);var e=0,o=function(){};return{s:o,n:function(){return e>=t.length?{done:!0}:{done:!1,value:t[e++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,u=!0,c=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return u=t.done,t},e:function(t){c=!0,i=t},f:function(){try{u||null==r.return||r.return()}finally{if(c)throw i}}}}function s(t,n){(null==n||n>t.length)&&(n=t.length);for(var r=0,e=new Array(n);r<n;r++)e[r]=t[r];return e}function l(t,n,r){n.forEach((function(n){t.positions[String(n)]=r}))}function p(t){return Object.keys(t.getPositions())}function h(t,n){var r=p(n),e=[];return r.forEach((function(n){for(var r=n.split(","),o=-1;o<2;o+=1)for(var i=-1;i<2;i+=1){var u=String([+r[0]+o,+r[1]+i]);"empty"!==t.positions[u]&&"unavailable"!==t.positions[u]||e.includes(u)||e.push(u)}})),e}function v(t,n,r,e){var o=i(n,r,e);return function(t,n){l(t,p(n),"ship")}(t,o),function(t,n){l(t,h(t,n),"unavailable")}(t,o),function(t,n){t.ships.push(n)}(t,o),o}function b(t,n){!function(t,n){l(t,p(n),"empty")}(t,n),function(t,n){l(t,h(t,n),"empty")}(t,n),function(t,n){var r=t.ships.indexOf(n);t.ships.splice(r,1)}(t,n)}function y(t,n){var r,e=f(t);try{for(e.s();!(r=e.n()).done;){var o=r.value;if(Object.keys(o.getPositions()).includes(String(n)))return o}}catch(t){e.e(t)}finally{e.f()}}function g(t,n){return"ship"===t.positions[String(n)]}var d=function(t){for(var n={positions:{},ships:[],gameBoardLen:t,missedShots:[],hitShots:[],unavailableShots:[]},r=0;r<t;r++)for(var e=0;e<t;e++)n.positions[String([r,e])]="empty";return c(c(c(c(c(c(c(c(c(c(c({},function(t){return{getPositions:function(){return t.positions}}}(n)),function(t){return{getShips:function(){return t.ships}}}(n)),function(t){return{createShip:function(n,r,e){return v(t,n,r,e)}}}(n)),function(t){return{removeShip:function(n){b(t,n)}}}(n)),function(t){return{changeShipAxis:function(n,r){return function(t,n,r){return b(t,n),v(t,n.getCreatePos(),n.getLen(),r)}(t,n,r)}}}(n)),function(t){return{checkPlacement:function(n,r,e){return function(t,n,r,e){var i,u=f(o(n,r,e));try{for(u.s();!(i=u.n()).done;){var c=i.value;if("empty"!==t.positions[String(c)])return!1}}catch(t){u.e(t)}finally{u.f()}return!0}(t,n,r,e)}}}(n)),function(t){return{receiveAttack:function(n){return function(t,n){if(g(t,n)){t.hitShots.push(String(n));var r=y(t.ships,n);r.hit(n),r.isSunk()&&function(t,n){h(t,n).forEach((function(n){t.missedShots.includes(n)||t.unavailableShots.includes(n)||t.unavailableShots.push(n)}))}(t,r)}else t.missedShots.push(String(n))}(t,n)}}}(n)),function(t){return{getAttacks:function(){return{missedShots:t.missedShots,hitShots:t.hitShots,unavailableShots:t.unavailableShots}}}}(n)),function(t){return{isGameOver:function(){return function(t){var n=!0;return t.ships.forEach((function(t){t.isSunk()||(n=!1)})),n}(t)}}}(n)),function(t){return{checkAttack:function(n){return g(t,n)}}}(n)),function(t){return{getPositionsAroundShip:function(n){return h(t,n)}}}(n))};function S(t,n){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(t);n&&(e=e.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),r.push.apply(r,e)}return r}function m(t){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?S(Object(r),!0).forEach((function(n){O(t,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):S(Object(r)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(r,n))}))}return t}function O(t,n,r){return n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t}var j=10;function P(t){for(var n=0;n<j;n++)for(var r=0;r<j;r++)t.availableShots.push(String([n,r]))}var w=function(t){return{getGameBoard:function(){return t.gameBoard}}},A=function(t){return{getGameBoardLen:function(){return t.gameBoardLen}}},k=function(t){return{getAvailableShots:function(){return t.availableShots}}},E=function(t){return{attack:function(n,r){return function(t,n,r){var e=t.availableShots.indexOf(String(r));n.receiveAttack(r),t.availableShots.splice(e,1)}(t,n,r)}}};function D(t,n,r,e,i){t.getGameBoard().createShip(r,e,i),function(t,n){t.forEach((function(t){var r=".p-".concat(String(t).replace(",","-"));n.querySelector(r).classList.add("ship")}))}(o(r,e,i),n)}var x,B,L,C=function(){var t={gameBoard:d(j),gameBoardLen:j,availableShots:[]};return P(t),m(m(m(m({},w(t)),A(t)),k(t)),E(t))}(),I=(P(x={gameBoard:d(j),gameBoardLen:j,availableShots:[]}),m(m(m(m(m({},w(x)),A(x)),k(x)),E(x)),function(t){return{getAttackPosition:function(){return function(t){var n=t.availableShots.length,r=Math.floor(Math.random()*n);return t.availableShots[r]}(t)}}}(x)));B=document.querySelector(".game-board.human"),L=document.querySelector(".game-board.ai"),function(t,n){for(var r=0;r<10;r++)for(var e=0;e<10;e++){var o=document.createElement("div");o.classList.add("position","p-".concat(r,"-").concat(e)),t.appendChild(o)}}(B),function(t,n,r,e){for(var o=function(o){for(var i=function(e){var i=document.createElement("div");i.classList.add("position","p-".concat(o,"-").concat(e)),r.appendChild(i),i.addEventListener("click",(function(){!function(t,n,r,e,o){if(r.attack(t,e),t.checkAttack(e)){o.textContent="X";var i=y(t.getShips(),e);i.isSunk()&&t.getPositionsAroundShip(i).forEach((function(t){var r=".p-".concat(String(t).replace(",","-"));n.querySelector(r).textContent="O"}))}else o.textContent="O"}(t,r,n,[o,e],i)}))},u=0;u<e;u++)i(u)},i=0;i<e;i++)o(i)}(I.getGameBoard(),C,L,j),D(C,B,[1,1],4,"x"),D(I,L,[1,1],2,"x"),D(I,L,[5,5],4,"y")}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,