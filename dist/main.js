!function(){"use strict";var t={d:function(e,n){for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r:function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};function n(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function r(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach((function(e){o(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){if(t){if("string"==typeof t)return c(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?c(t,e):void 0}}function c(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function u(t,e,n){var r=[];if("x"===n)for(var o=t[0],i=t[1],c=0;c<e;c++)r.push([o,+i+c]);else if("y"===n)for(var u=t[0],a=t[1],f=0;f<e;f++)r.push([+u+f,a]);return r}t.r(e),t.d(e,{Z:function(){return h}});var a=function(t,e,n){var o,c={positions:{},createPos:t,axis:n,len:e},a=u(t,e,n),f=function(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=i(t))){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var c,u=!0,a=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return u=t.done,t},e:function(t){a=!0,c=t},f:function(){try{u||null==n.return||n.return()}finally{if(a)throw c}}}}(a);try{for(f.s();!(o=f.n()).done;){var s=o.value;c.positions[String(s)]="good"}}catch(t){f.e(t)}finally{f.f()}var l,p,y=(l=a.slice(-1),p=1,function(t){if(Array.isArray(t))return t}(l)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i=[],c=!0,u=!1;try{for(n=n.call(t);!(c=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);c=!0);}catch(t){u=!0,o=t}finally{try{c||null==n.return||n.return()}finally{if(u)throw o}}return i}}(l,p)||i(l,p)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());return c.lastPosition=y[0],r(r(r(r(r({},function(t){return{getPositions:function(){return t.positions}}}(c)),function(t){return{getLen:function(){return t.len}}}(c)),function(t){return{getCreatePos:function(){return t.createPos}}}(c)),function(t){return{getLastPos:function(){return t.lastPosition}}}(c)),function(t){return{getAxis:function(){return t.axis}}}(c))};function f(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?f(Object(n),!0).forEach((function(e){l(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):f(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function p(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function y(t,e,n){e.forEach((function(e){t.positions[String(e)]=n}))}function b(t){return Object.keys(t.getPositions())}function d(t,e){var n=b(e),r=[];return n.forEach((function(e){for(var n=e.split(","),o=-1;o<2;o+=1)for(var i=-1;i<2;i+=1){var c=String([+n[0]+o,+n[1]+i]);"empty"!==t.positions[c]&&"unavailable"!==t.positions[c]||r.includes(c)||r.push(c)}})),r}function g(t,e,n,r){var o=a(e,n,r);return function(t,e){y(t,b(e),"ship")}(t,o),function(t,e){y(t,d(t,e),"unavailable")}(t,o),function(t,e){t.ships.push(e)}(t,o),o}function v(t,e){!function(t,e){y(t,b(e),"empty")}(t,e),function(t,e){y(t,d(t,e),"empty")}(t,e),function(t,e){var n=t.ships.indexOf(e);t.ships.splice(n,1)}(t,e)}var m=function(t){return{checkPlacement:function(e,n,r){return function(t,e,n,r){var o,i=function(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return p(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?p(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,c=!0,u=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return c=t.done,t},e:function(t){u=!0,i=t},f:function(){try{c||null==n.return||n.return()}finally{if(u)throw i}}}}(u(e,n,r));try{for(i.s();!(o=i.n()).done;){var c=o.value;if("empty"!==t.positions[String(c)])return!1}}catch(t){i.e(t)}finally{i.f()}return!0}(t,e,n,r)}}},h=function(t){for(var e={positions:{},ships:[],gameBoardLen:t},n=0;n<t;n++)for(var r=0;r<t;r++)e.positions[String([n,r])]="empty";return s(s(s(s(s(s(s({},function(t){return{getPositions:function(){return t.positions}}}(e)),function(t){return{getShips:function(){return t.ships}}}(e)),function(t){return{createShip:function(e,n,r){return g(t,e,n,r)}}}(e)),function(t){return{removeShip:function(e){v(t,e)}}}(e)),function(t){return{changeShipAxis:function(e,n){return function(t,e,n){return v(t,e),g(t,e.getCreatePos(),e.getLen(),n)}(t,e,n)}}}(e)),m(e)),function(t){return{getPositionsAroundShip:function(e){return d(t,e)}}}(e))};function O(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function S(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?O(Object(n),!0).forEach((function(e){j(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):O(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function j(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var P,w=10,A=function(t){return{getGameBoard:function(){return t.gameBoard}}},x=function(t){return{getGameBoardLen:function(){return t.gameBoardLen}}},B=function(t){return{createShip:function(e,n,r){return function(t,e,n,r){return t.gameBoard.createShip(e,n,r)}(t,e,n,r)}}},E=function(t){return{checkPlacement:function(e,n,r){return function(t,e,n,r){return t.gameBoard.checkPlacement(e,n,r)}(t,e,n,r)}}},L=function(t){return{removeShip:function(e){!function(t,e){t.gameBoard.removeShip(e)}(t,e)}}},k=function(t){return{changeShipAxis:function(e,n){return function(t,e,n){return t.gameBoard.changeShipAxis(e,n)}(t,e,n)}}};function D(t,e,n,r,o){t.getGameBoard().createShip(n,r,o),function(t,e){t.forEach((function(t){var n=".p-".concat(String(t).replace(",","-"));e.querySelector(n).classList.add("ship")}))}(u(n,r,o),e)}function C(t,n,r,o,i){if(r.attack(t,o),t.checkAttack(o)){i.textContent="X";var c=(0,e.getHitShip)(t.getShips(),o);c.isSunk()&&t.getPositionsAroundShip(c).forEach((function(t){var e=".p-".concat(String(t).replace(",","-")),r=n.querySelector(e);r.textContent="O",r.classList.remove("selectable")}))}else i.textContent="O"}var I,G=function(){var t={gameBoard:h(w),gameBoardLen:w};return S(S(S(S(S(S({},A(t)),x(t)),B(t)),E(t)),L(t)),k(t))}(),q=(I={gameBoard:h(w),gameBoardLen:w},S(S(S(S(S(S({},A(I)),x(I)),B(I)),E(I)),L(I)),k(I))),T=document.querySelector(".game-board.human"),M=document.querySelector(".game-board.ai"),U=q.getGameBoard(),$=G.getGameBoard();!function(t,e){for(var n=0;n<10;n++)for(var r=0;r<10;r++){var o=document.createElement("div");o.classList.add("position","p-".concat(n,"-").concat(r)),t.appendChild(o)}}(T),function(t,e,n,r,o,i,c){for(var u=function(u){for(var a=function(c){var a=document.createElement("div");a.classList.add("position","p-".concat(u,"-").concat(c),"selectable"),n.appendChild(a),P=function(){if(!e.getAttacks().unavailableShots.includes(String([u,c]))){if(C(e,n,r,[u,c],a),e.isGameOver())return console.log("player won"),void n.classList.add("game-over");if(function(t,e,n){var r=n.getAttackPosition(),o=".p-".concat(String(r).replace(",","-")),i=e.querySelector(o);C(t,e,n,r,i)}(o,i,t),o.isGameOver())return console.log("ai won"),void n.classList.add("game-over");a.classList.remove("selectable")}},a.addEventListener("click",P,{once:!0,capture:!1})},f=0;f<c;f++)a(f)},a=0;a<c;a++)u(a)}(q,U,M,G,$,T,w),D(G,T,[1,1],1,"x"),D(q,M,[1,1],2,"x"),D(q,M,[5,5],4,"y")}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,