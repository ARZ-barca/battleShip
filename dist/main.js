!function(){"use strict";function t(t,r){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(t);r&&(e=e.filter((function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable}))),n.push.apply(n,e)}return n}function r(r){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?t(Object(o),!0).forEach((function(t){n(r,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):t(Object(o)).forEach((function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t))}))}return r}function n(t,r,n){return r in t?Object.defineProperty(t,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[r]=n,t}function e(t,r){if(t){if("string"==typeof t)return o(t,r);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(t,r):void 0}}function o(t,r){(null==r||r>t.length)&&(r=t.length);for(var n=0,e=new Array(r);n<r;n++)e[n]=t[n];return e}function i(t,r,n){var e=[];if("x"===n)for(var o=t[0],i=t[1],a=0;a<r;a++)e.push([o,+i+a]);else if("y"===n)for(var u=t[0],c=t[1],f=0;f<r;f++)e.push([+u+f,c]);return e}var a=function(t,n,o){var a,u={positions:{},createPos:t,axis:o,len:n},c=i(t,n,o),f=function(t,r){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=e(t))){n&&(t=n);var o=0,i=function(){};return{s:i,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,u=!0,c=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return u=t.done,t},e:function(t){c=!0,a=t},f:function(){try{u||null==n.return||n.return()}finally{if(c)throw a}}}}(c);try{for(f.s();!(a=f.n()).done;){var l=a.value;u.positions[String(l)]="good"}}catch(t){f.e(t)}finally{f.f()}var s,d,p=(s=c.slice(-1),d=1,function(t){if(Array.isArray(t))return t}(s)||function(t,r){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var e,o,i=[],a=!0,u=!1;try{for(n=n.call(t);!(a=(e=n.next()).done)&&(i.push(e.value),!r||i.length!==r);a=!0);}catch(t){u=!0,o=t}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(s,d)||e(s,d)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());return u.lastPosition=p[0],r(r(r(r(r(r(r({},function(t){return{getPositions:function(){return t.positions}}}(u)),function(t){return{isSunk:function(){return Object.values(t.positions).every((function(t){return"hit"===t}))}}}(u)),function(t){return{hit:function(r){t.positions[String(r)]="hit"}}}(u)),function(t){return{getLen:function(){return t.len}}}(u)),function(t){return{getCreatePos:function(){return t.createPos}}}(u)),function(t){return{getLastPos:function(){return t.lastPosition}}}(u)),function(t){return{getAxis:function(){return t.axis}}}(u))};function u(t,r){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(t);r&&(e=e.filter((function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable}))),n.push.apply(n,e)}return n}function c(t){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?u(Object(n),!0).forEach((function(r){f(t,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(n,r))}))}return t}function f(t,r,n){return r in t?Object.defineProperty(t,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[r]=n,t}function l(t,r){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,r){if(t){if("string"==typeof t)return s(t,r);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(t,r):void 0}}(t))||r&&t&&"number"==typeof t.length){n&&(t=n);var e=0,o=function(){};return{s:o,n:function(){return e>=t.length?{done:!0}:{done:!1,value:t[e++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,u=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return a=t.done,t},e:function(t){u=!0,i=t},f:function(){try{a||null==n.return||n.return()}finally{if(u)throw i}}}}function s(t,r){(null==r||r>t.length)&&(r=t.length);for(var n=0,e=new Array(r);n<r;n++)e[n]=t[n];return e}function d(t,r,n){r.forEach((function(r){t.positions[String(r)]=n}))}function p(t){return Object.keys(t.getPositions())}function y(t,r){var n=p(r),e=[];return n.forEach((function(r){for(var n=r.split(","),o=-1;o<2;o+=1)for(var i=-1;i<2;i+=1){var a=String([+n[0]+o,+n[1]+i]);"empty"!==t.positions[a]&&"unavailable"!==t.positions[a]||e.includes(a)||e.push(a)}})),e}function v(t,r,n,e){var o=a(r,n,e);return function(t,r){d(t,p(r),"ship")}(t,o),function(t,r){d(t,y(t,r),"unavailable")}(t,o),function(t,r){t.ships.push(r)}(t,o),o}function h(t,r){!function(t,r){d(t,p(r),"empty")}(t,r),function(t,r){d(t,y(t,r),"empty")}(t,r),function(t,r){var n=t.ships.indexOf(r);t.ships.splice(n,1)}(t,r)}function m(t,r){var n,e=l(t);try{for(e.s();!(n=e.n()).done;){var o=n.value;if(Object.keys(o.getPositions()).includes(String(r)))return o}}catch(t){e.e(t)}finally{e.f()}}function b(t,r){return"ship"===t.positions[String(r)]}var g=function(t){for(var r={positions:{},ships:[],gameBoardLen:t},n=0;n<t;n++)for(var e=0;e<t;e++)r.positions[String([n,e])]="empty";return c(c(c(c(c(c(c(c(c(c({},function(t){return{getPositions:function(){return t.positions}}}(r)),function(t){return{getShips:function(){return t.ships}}}(r)),function(t){return{createShip:function(r,n,e){return v(t,r,n,e)}}}(r)),function(t){return{removeShip:function(r){h(t,r)}}}(r)),function(t){return{changeShipAxis:function(r,n){return function(t,r){return h(t,r),v(t,r.getCreatePos(),r.getLen(),"x"===r.getAxis()?"y":"x")}(t,r)}}}(r)),function(t){return{checkPlacement:function(r,n,e){return function(t,r,n,e){var o,a=l(i(r,n,e));try{for(a.s();!(o=a.n()).done;){var u=o.value;if("empty"!==t.positions[String(u)])return!1}}catch(t){a.e(t)}finally{a.f()}return!0}(t,r,n,e)}}}(r)),function(t){return{receiveAttack:function(r){return function(t,r){if(b(t,r)){var n=m(t.ships,r);return n.hit(r),n}}(t,r)}}}(r)),function(t){return{isGameOver:function(){return function(t){var r=!0;return t.ships.forEach((function(t){t.isSunk()||(r=!1)})),r}(t)}}}(r)),function(t){return{checkAttack:function(r){return b(t,r)}}}(r)),function(t){return{getPositionsAroundShip:function(r){return y(t,r)}}}(r))};function S(t,r){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(t);r&&(e=e.filter((function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable}))),n.push.apply(n,e)}return n}function O(t){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?S(Object(n),!0).forEach((function(r){A(t,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):S(Object(n)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(n,r))}))}return t}function A(t,r,n){return r in t?Object.defineProperty(t,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[r]=n,t}function j(t,r){(null==r||r>t.length)&&(r=t.length);for(var n=0,e=new Array(r);n<r;n++)e[n]=t[n];return e}var w=10;function P(t){for(var r=0;r<w;r++)for(var n=0;n<w;n++)t.availableShots.push(String([r,n]))}var E=function(t){return{getGameBoard:function(){return t.gameBoard}}},L=function(t){return{getGameBoardLen:function(){return t.gameBoardLen}}},x=function(t){return{createShip:function(r,n,e){return function(t,r,n,e){return t.gameBoard.createShip(r,n,e)}(t,r,n,e)}}};function I(t,r,n,e){return t.gameBoard.checkPlacement(r,n,e)}var k=function(t){return{checkPlacement:function(r,n,e){return I(t,r,n,e)}}},C=function(t){return{removeShip:function(r){!function(t,r){t.gameBoard.removeShip(r)}(t,r)}}},B=function(t){return{changeShipAxis:function(r){return function(t,r){return t.gameBoard.changeShipAxis(r)}(t,r)}}};function M(t){return t[Math.floor(t.length*Math.random())]}var T=function(t){return{getRandomShip:function(r){return function(t,r){for(var n=[],e=0;e<w;e++)for(var o=0;o<w;o++)n.push([e,o]);for(;;){var i=M(n),u=Math.floor(100*Math.random())%2==0?"x":"y";if(I(t,i,r,u))return a(i,r,u);var c="x"===u?"y":"x";if(I(t,i,r,c))return a(i,r,c);n.splice(n.indexOf(i),1)}}(t,r)}}},D=function(t){return{clear:function(){!function(t){for(var r=function(t){if(Array.isArray(t))return j(t)}(e=t.gameBoard.getShips())||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(e)||function(t,r){if(t){if("string"==typeof t)return j(t,r);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?j(t,r):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),n=0;n<r.length;n++)t.gameBoard.removeShip(r[n]);var e}(t)}}},G=function(t){return{getAvailableShots:function(){return t.availableShots}}},U=function(t){return{attack:function(r,n){return function(t,r,n){var e=t.availableShots.indexOf(String(n));t.availableShots.splice(e,1);var o=r.receiveAttack(n);return o&&o.isSunk()&&r.getPositionsAroundShip(o).forEach((function(r){var n=t.availableShots.indexOf(String(r));-1!==n&&t.availableShots.splice(n,1)})),o}(t,r,n)}}};function $(){var t={gameBoard:g(w),gameBoardLen:w,availableShots:[]};return P(t),O(O(O(O(O(O(O(O(O(O(O({},E(t)),L(t)),x(t)),k(t)),C(t)),B(t)),T(t)),D(t)),G(t)),U(t)),function(t){return{getAttackPosition:function(){return function(t){return n=(r=t.availableShots).length,r[Math.floor(Math.random()*n)];var r,n}(t)}}}(t))}function q(t,r){(null==r||r>t.length)&&(r=t.length);for(var n=0,e=new Array(r);n<r;n++)e[n]=t[n];return e}function H(){for(var t=document.createElement("div"),r=0;r<w;r++)for(var n=0;n<w;n++){var e=document.createElement("div");e.classList.add("position","p-".concat(r,"-").concat(n)),t.appendChild(e)}return t.classList.add("game-board"),t}function R(t,r){return function(t){if(Array.isArray(t))return t}(t)||function(t,r){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var e,o,i=[],a=!0,u=!1;try{for(n=n.call(t);!(a=(e=n.next()).done)&&(i.push(e.value),!r||i.length!==r);a=!0);}catch(t){u=!0,o=t}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(t,r)||z(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function z(t,r){if(t){if("string"==typeof t)return F(t,r);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?F(t,r):void 0}}function F(t,r){(null==r||r>t.length)&&(r=t.length);for(var n=0,e=new Array(r);n<r;n++)e[n]=t[n];return e}var J=function(t,r,n){var e,o,i=function(t,r){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=z(t))){n&&(t=n);var e=0,o=function(){};return{s:o,n:function(){return e>=t.length?{done:!0}:{done:!1,value:t[e++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,u=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return a=t.done,t},e:function(t){u=!0,i=t},f:function(){try{a||null==n.return||n.return()}finally{if(u)throw i}}}}(r);try{for(i.s();!(e=i.n()).done;){var a=e.value,u=R(String(a).split(","),2),c=u[0],f=u[1];(o=t.children,function(t){if(Array.isArray(t))return F(t)}(o)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(o)||z(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[+c*w+ +f].classList.add(n)}}catch(t){i.e(t)}finally{i.f()}};function K(t){return function(t){if(Array.isArray(t))return Q(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||N(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function N(t,r){if(t){if("string"==typeof t)return Q(t,r);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Q(t,r):void 0}}function Q(t,r){(null==r||r>t.length)&&(r=t.length);for(var n=0,e=new Array(r);n<r;n++)e[n]=t[n];return e}function V(t){var r=document.createElement("div"),n=document.createElement("div");n.textContent=t;var e=document.createElement("button");return e.textContent="play again",r.appendChild(n),r.appendChild(e),r}function W(t,r,n,e,o){var i,a,u,c,f=t.getAttackPosition(),l=t.attack(r,f),s=K(n.children)[(i=f,a=function(t,r){return function(t){if(Array.isArray(t))return t}(t)||function(t,r){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var e,o,i=[],a=!0,u=!1;try{for(n=n.call(t);!(a=(e=n.next()).done)&&(i.push(e.value),!r||i.length!==r);a=!0);}catch(t){u=!0,o=t}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(t,r)||N(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(String(i).split(","),2),u=a[0],c=a[1],+u*w+ +c)];if(l){if(s.classList.add("hit"),l.isSunk()){var d=r.getPositionsAroundShip(l);J(n,d,"invalid")}}else s.classList.add("miss");if(r.isGameOver()){var p=V("you lost!");e.classList.add("finished"),o.appendChild(p),p.querySelector("button").addEventListener("click",(function(){o.innerHTML="",rt(o)}))}}var X;function Y(t,r){(null==r||r>t.length)&&(r=t.length);for(var n=0,e=new Array(r);n<r;n++)e[n]=t[n];return e}var Z=function(t,r){for(var n=function(n){for(var e=function(e){var o;(o=t.children,function(t){if(Array.isArray(t))return Y(t)}(o)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(o)||function(t,r){if(t){if("string"==typeof t)return Y(t,r);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Y(t,r):void 0}}(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[n*w+e].addEventListener("click",(function(o){if(X)o.target.getAttribute("class").includes("ship");else if(o.target.getAttribute("class").includes("ship")){X=m(r.getShips(),[n,e]),r.removeShip(X);var a=i(X.getCreatePos(),X.getLen(),X.getAxis());J(t,a,"selected")}}))},o=0;o<w;o++)e(o)},e=0;e<w;e++)n(e)},_=[4,3,3,2,2,2,1,1,1,1];function tt(t,r,n){n.forEach((function(n){var e=t.getRandomShip(n);!function(t,r,n,e,o){var a=t.createShip(n,e,o);(function(t,r){t.forEach((function(t){var n=".p-".concat(String(t).replace(",","-"));r.querySelector(n).classList.add("ship")}))})(i(n,e,o),r)}(t,r,e.getCreatePos(),n,e.getAxis())}))}var rt=function(t){var r,n=H(),e=(P(r={gameBoard:g(w),gameBoardLen:w,availableShots:[]}),O(O(O(O(O(O(O(O(O(O({},E(r)),L(r)),x(r)),k(r)),C(r)),B(r)),T(r)),D(r)),G(r)),U(r))),o=document.createElement("div");o.classList.add("board-container"),o.appendChild(n);var i=document.createElement("button");i.textContent="random",i.classList.add("random");var a=document.createElement("button");a.textContent="start",a.classList.add("start"),t.appendChild(o),t.appendChild(i),t.appendChild(a),tt(e,n,_),Z(n,e.getGameBoard()),i.addEventListener("click",(function(){var t;e.clear(),(t=n.children,function(t){if(Array.isArray(t))return q(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,r){if(t){if("string"==typeof t)return q(t,r);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?q(t,r):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).forEach((function(t){t.classList.remove("ship","selected")})),tt(e,n,_),X=void 0})),a.addEventListener("click",(function(){var r=$(),o=H();tt(r,o,_),t.innerHTML="",function(t,r,n,e,o){var i=document.createElement("div");i.classList.add("boards-container"),i.appendChild(e),i.appendChild(o);for(var a=K(o.children),u=function(i){for(var u=function(u){a[i*w+u].addEventListener("click",(function(a){var c=a.target;!function(t,r,n,e,o,i,a,u,c){var f=r.attack(o,t);if(f){if(u.classList.add("hit"),f.isSunk()){var l=o.getPositionsAroundShip(f);J(i,l,"invalid")}}else u.classList.add("miss");if(o.isGameOver()){var s=V("you won!");i.classList.add("finished"),c.appendChild(s),s.querySelector("button").addEventListener("click",(function(){c.innerHTML="",rt(c)}))}else W(n,e,a,i,c)}([i,u],r,n,r.getGameBoard(),n.getGameBoard(),o,e,c,t)}))},c=0;c<w;c++)u(c)},c=0;c<w;c++)u(c);t.appendChild(i)}(t,e,r,n,o)}))},nt=document.querySelector("main");rt(nt)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,